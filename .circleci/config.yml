version: 2.1

orbs:
  win: circleci/windows@2.4.0

aliases:
  - &macos-env
    macos:
      xcode: 14.0.0
      
  - &windows-env
    executor:
      name: win/default
      shell: bash.exe

  - &node-env
    docker:
      - image: cimg/node:lts

  - &only_on_tag
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /^v[0-9]+(\.[0-9]+)*$/

  - &not_on_tag
    filters:
      tags:
        ignore: /^v.*/

commands:

  restore_npm_cache:
    description: Restore NPM cache
    steps:
      - restore_cache:
          keys:
          - npm-cache-v4-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}
          - npm-cache-v4-{{ arch }}-{{ .Branch }}
          - npm-cache-v4-{{ arch }}

  save_npm_cache:
    description: Save NPM cache
    steps:
      - save_cache:
          key: npm-cache-v4-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  npm_install:
    description: Install NPM dependencies
    steps:
      - restore_npm_cache
      - run: npm install
      - save_npm_cache

  install_npm_token:
    steps: 
      - run:
          name: Write NPM Token to ~/.npmrc
          command: echo "//registry.npmjs.org/:_authToken=$NPM_ACCESS_TOKEN" >> ~/.npmrc

  install_cmake_macos:
    steps:
      - run: 
          name: Install CMake
          command: |
            curl -OsL https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-macos10.10-universal.tar.gz
            tar xf cmake-3.21.3-macos10.10-universal.tar.gz --strip-components=1
            rm cmake-3.21.3-macos10.10-universal.tar.gz
            chmod -R a+rwx "$PWD/CMake.app"
            export PATH="$PATH:$PWD/CMake.app/Contents/bin"
            sudo "$PWD/CMake.app/Contents/bin/cmake-gui" --install

  install_cmake_windows:
    steps:
      - run: 
          name: Install CMake
          command: |
            choco install cmake --version=3.21.3 --installargs '"ADD_CMAKE_TO_PATH=User"'
            PATH_TO_CMAKE='/c/Program Files/CMake/bin'
            echo "export PATH='$PATH_TO_CMAKE:$PATH'" >> $BASH_ENV

  build_library:
    description: Build end-to-end testing library
    steps:
      - run: 
          name: Create end-to-end testing library
          command: |
            npm run generate
            npm run build-cpp

  persist:
    steps:
      - persist_to_workspace:
          root: .
          paths:
            - cmake-build/*
            - dist/*

  test_example_app:
    steps:
      - run:
          name: Test Example Application
          command: npm run test-example

  test_typescript_library:
    steps:
      - run:
          name: Test TypeScript library
          command: npm test

  test_cpp_library:
    steps:
      - run:
          name: Test C++ library
          command: npm run test-cpp

jobs:

  macos_build:
    <<: *macos-env
    steps:
      - checkout
      - npm_install
      - install_cmake_macos
      - build_library
      - persist

  windows_build:
    <<: *windows-env
    steps:
      - checkout
      - npm_install
      - install_cmake_windows
      - build_library
      - persist

  typescript_build:
    <<: *node-env
    steps:
      - checkout
      - npm_install
      - run:
          name: Lint
          command: npm run lint
      - run:
          name: Compile TypeScript
          command: npx tsc
      - persist

  macos_test:
    <<: *macos-env
    steps:
      - checkout
      - attach_workspace:
          at: .
      - npm_install
      - install_cmake_macos
      - test_example_app
      - test_cpp_library

  windows_test:
    <<: *windows-env
    steps:
      - checkout
      - attach_workspace:
          at: .
      - npm_install
      - install_cmake_windows
      - test_example_app
      - test_cpp_library

  typescript_test:
    <<: *node-env
    steps:
      - checkout
      - npm_install
      - test_typescript_library

  macos_release:
    <<: *macos-env
    steps:
      - checkout
      - npm_install
      - attach_workspace:
          at: .
      - run: npm run release-cpp

  windows_release:
    <<: *windows-env
    steps:
      - checkout
      - npm_install
      - attach_workspace:
          at: .
      - run: npm run release-cpp

  typescript_release:
    <<: *node-env
    steps:
      - checkout
      - install_npm_token
      - npm_install
      - attach_workspace:
          at: .
      - run:
          name: Publish NPM package
          command: npm publish --access=public

workflows:

  build_and_test:
    jobs:
      - macos_build:
          <<: *not_on_tag
      - windows_build:
          <<: *not_on_tag
      - macos_test:
          <<: *not_on_tag
          requires:
            - macos_build
      - windows_test:
          <<: *not_on_tag
          requires:
            - windows_build
      - typescript_build:
          <<: *not_on_tag
      - typescript_test:
          <<: *not_on_tag
          requires:
            - typescript_build

  build_test_and_release:
    jobs:
      - macos_build:
          <<: *only_on_tag
      - macos_test:
          <<: *only_on_tag
          requires:
            - macos_build
      - macos_release:
          <<: *only_on_tag
          requires:
            - macos_test
      - windows_build:
          <<: *only_on_tag
      - windows_test:
          <<: *only_on_tag
          requires:
            - windows_build
      - windows_release:
          <<: *only_on_tag
          requires:
            - windows_test
      - typescript_build:
          <<: *only_on_tag
      - typescript_test:
          <<: *only_on_tag
          requires:
            - typescript_build
      - typescript_release:
          <<: *only_on_tag
          context:
            - NPMJS-CONFIG
          requires:
            - typescript_test
